(gdb) disassemble strings_not_equal 
Dump of assembler code for function strings_not_equal:
   0x0000000000401338 <+0>:		push   %r12
   0x000000000040133a <+2>:		push   %rbp
   0x000000000040133b <+3>:		push   %rbx
   0x000000000040133c <+4>:		mov    %rdi,%rbx
   0x000000000040133f <+7>:		mov    %rsi,%rbp
   0x0000000000401342 <+10>:	callq  0x40131b <string_length>
   0x0000000000401347 <+15>:	mov    %eax,%r12d
   0x000000000040134a <+18>:	mov    %rbp,%rdi
   0x000000000040134d <+21>:	callq  0x40131b <string_length>
   0x0000000000401352 <+26>:	mov    $0x1,%edx
   0x0000000000401357 <+31>:	cmp    %eax,%r12d
   0x000000000040135a <+34>:	jne    0x40139b <strings_not_equal+99>
   0x000000000040135c <+36>:	movzbl (%rbx),%eax
   0x000000000040135f <+39>:	test   %al,%al
   0x0000000000401361 <+41>:	je     0x401388 <strings_not_equal+80>
   0x0000000000401363 <+43>:	cmp    0x0(%rbp),%al
   0x0000000000401366 <+46>:	je     0x401372 <strings_not_equal+58>
   0x0000000000401368 <+48>:	jmp    0x40138f <strings_not_equal+87>
   0x000000000040136a <+50>:	cmp    0x0(%rbp),%al
   0x000000000040136d <+53>:	nopl   (%rax)
   0x0000000000401370 <+56>:	jne    0x401396 <strings_not_equal+94>
   0x0000000000401372 <+58>:	add    $0x1,%rbx





(gdb) disassemble phase_1
Dump of assembler code for function phase_1:
   0x0000000000400ee0 <+0>:		sub    $0x8,%rsp
   0x0000000000400ee4 <+4>:		mov    $0x402400,%esi
   0x0000000000400ee9 <+9>:		callq  0x401338 <strings_not_equal>
   0x0000000000400eee <+14>:	test   %eax,%eax
   0x0000000000400ef0 <+16>:	je     0x400ef7 <phase_1+23>
   0x0000000000400ef2 <+18>:	callq  0x40143a <explode_bomb>
   0x0000000000400ef7 <+23>:	add    $0x8,%rsp
   0x0000000000400efb <+27>:	retq   




(gdb) disassemble phase_2
Dump of assembler code for function phase_2:
   0x0000000000400efc <+0>:		push   %rbp
   0x0000000000400efd <+1>:		push   %rbx
   0x0000000000400efe <+2>:		sub    $0x28,%rsp
   0x0000000000400f02 <+6>:		mov    %rsp,%rsi
   0x0000000000400f05 <+9>:		callq  0x40145c <read_six_numbers>
   0x0000000000400f0a <+14>:	cmpl   $0x1,(%rsp)
   0x0000000000400f0e <+18>:	je     0x400f30 <phase_2+52>
   0x0000000000400f10 <+20>:	callq  0x40143a <explode_bomb>
   0x0000000000400f15 <+25>:	jmp    0x400f30 <phase_2+52>
   0x0000000000400f17 <+27>:	mov    -0x4(%rbx),%eax
   0x0000000000400f1a <+30>:	add    %eax,%eax
   0x0000000000400f1c <+32>:	cmp    %eax,(%rbx)
   0x0000000000400f1e <+34>:	je     0x400f25 <phase_2+41>
   0x0000000000400f20 <+36>:	callq  0x40143a <explode_bomb>
   0x0000000000400f25 <+41>:	add    $0x4,%rbx
   0x0000000000400f29 <+45>:	cmp    %rbp,%rbx
   0x0000000000400f2c <+48>:	jne    0x400f17 <phase_2+27>
   0x0000000000400f2e <+50>:	jmp    0x400f3c <phase_2+64>
   0x0000000000400f30 <+52>:	lea    0x4(%rsp),%rbx
   0x0000000000400f35 <+57>:	lea    0x18(%rsp),%rbp
   0x0000000000400f3a <+62>:	jmp    0x400f17 <phase_2+27>
   0x0000000000400f3c <+64>:	add    $0x28,%rsp




(gdb) disass read_six_numbers 
Dump of assembler code for function read_six_numbers:
   0x000000000040145c <+0>:		sub    $0x18,%rsp
   0x0000000000401460 <+4>:		mov    %rsi,%rdx
   0x0000000000401463 <+7>:		lea    0x4(%rsi),%rcx
   0x0000000000401467 <+11>:	lea    0x14(%rsi),%rax
   0x000000000040146b <+15>:	mov    %rax,0x8(%rsp)
   0x0000000000401470 <+20>:	lea    0x10(%rsi),%rax
   0x0000000000401474 <+24>:	mov    %rax,(%rsp)
   0x0000000000401478 <+28>:	lea    0xc(%rsi),%r9
   0x000000000040147c <+32>:	lea    0x8(%rsi),%r8
   0x0000000000401480 <+36>:	mov    $0x4025c3,%esi
   0x0000000000401485 <+41>:	mov    $0x0,%eax
   0x000000000040148a <+46>:	callq  0x400bf0 <__isoc99_sscanf@plt>
   0x000000000040148f <+51>:	cmp    $0x5,%eax
   0x0000000000401492 <+54>:	jg     0x401499 <read_six_numbers+61>
   0x0000000000401494 <+56>:	callq  0x40143a <explode_bomb>
   0x0000000000401499 <+61>:	add    $0x18,%rsp
   0x000000000040149d <+65>:	retq 




Dump of assembler code for function phase_3:
   0x0000000000400f43 <+0>:		sub    $0x18,%rsp
   0x0000000000400f47 <+4>:		lea    0xc(%rsp),%rcx	// the two integers
   0x0000000000400f4c <+9>:		lea    0x8(%rsp),%rdx
   0x0000000000400f51 <+14>:	mov    $0x4025cf,%esi
   0x0000000000400f56 <+19>:	mov    $0x0,%eax
   0x0000000000400f5b <+24>:	callq  0x400bf0 <__isoc99_sscanf@plt>
   0x0000000000400f60 <+29>:	cmp    $0x1,%eax
   0x0000000000400f63 <+32>:	jg     0x400f6a <phase_3+39>
   0x0000000000400f65 <+34>:	callq  0x40143a <explode_bomb>
   0x0000000000400f6a <+39>:	cmpl   $0x7,0x8(%rsp)
   0x0000000000400f6f <+44>:	ja     0x400fad <phase_3+106>
   0x0000000000400f71 <+46>:	mov    0x8(%rsp),%eax
   0x0000000000400f75 <+50>:	jmpq   *0x402470(,%rax,8)
   0x0000000000400f7c <+57>:	mov    $0xcf,%eax
   0x0000000000400f81 <+62>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f83 <+64>:	mov    $0x2c3,%eax
   0x0000000000400f88 <+69>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f8a <+71>:	mov    $0x100,%eax
   0x0000000000400f8f <+76>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f91 <+78>:	mov    $0x185,%eax
   0x0000000000400f96 <+83>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f98 <+85>:	mov    $0xce,%eax
   0x0000000000400f9d <+90>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400f9f <+92>:	mov    $0x2aa,%eax
   0x0000000000400fa4 <+97>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400fa6 <+99>:	mov    $0x147,%eax
   0x0000000000400fab <+104>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400fad <+106>:	callq  0x40143a <explode_bomb>
   0x0000000000400fb2 <+111>:	mov    $0x0,%eax
   0x0000000000400fb7 <+116>:	jmp    0x400fbe <phase_3+123>
   0x0000000000400fb9 <+118>:	mov    $0x137,%eax
   0x0000000000400fbe <+123>:	cmp    0xc(%rsp),%eax				// jmp here
   0x0000000000400fc2 <+127>:	je     0x400fc9 <phase_3+134>
   0x0000000000400fc4 <+129>:	callq  0x40143a <explode_bomb>
   0x0000000000400fc9 <+134>:	add    $0x18,%rsp
   0x0000000000400fcd <+138>:	retq  

ANSWER for phase 3: 
0+207 1+311 2+707 3+256 4+389 5+206 6+682 7+327



Dump of assembler code for function phase_4:
   0x000000000040100c <+0>:		sub    $0x18,%rsp
   0x0000000000401010 <+4>:		lea    0xc(%rsp),%rcx
   0x0000000000401015 <+9>:		lea    0x8(%rsp),%rdx
   0x000000000040101a <+14>:	mov    $0x4025cf,%esi
   0x000000000040101f <+19>:	mov    $0x0,%eax
   0x0000000000401024 <+24>:	callq  0x400bf0 <__isoc99_sscanf@plt>
   0x0000000000401029 <+29>:	cmp    $0x2,%eax
   0x000000000040102c <+32>:	jne    0x401035 <phase_4+41>
   0x000000000040102e <+34>:	cmpl   $0xe,0x8(%rsp)
   0x0000000000401033 <+39>:	jbe    0x40103a <phase_4+46>
   0x0000000000401035 <+41>:	callq  0x40143a <explode_bomb>
   0x000000000040103a <+46>:	mov    $0xe,%edx
   0x000000000040103f <+51>:	mov    $0x0,%esi
   0x0000000000401044 <+56>:	mov    0x8(%rsp),%edi
   0x0000000000401048 <+60>:	callq  0x400fce <func4>
   0x000000000040104d <+65>:	test   %eax,%eax
   0x000000000040104f <+67>:	jne    0x401058 <phase_4+76>
   0x0000000000401051 <+69>:	cmpl   $0x0,0xc(%rsp)
   0x0000000000401056 <+74>:	je     0x40105d <phase_4+81>
   0x0000000000401058 <+76>:	callq  0x40143a <explode_bomb>
   0x000000000040105d <+81>:	add    $0x18,%rsp
   0x0000000000401061 <+85>:	retq 




(gdb) disass func4 
Dump of assembler code for function func4:
   0x0000000000400fce <+0>:		sub    $0x8,%rsp
   0x0000000000400fd2 <+4>:		mov    %edx,%eax
   0x0000000000400fd4 <+6>:		sub    %esi,%eax 			// mid1=x-y;
   0x0000000000400fd6 <+8>:		mov    %eax,%ecx
   0x0000000000400fd8 <+10>:	shr    $0x1f,%ecx			// mid2=(x-y)>>31;
   0x0000000000400fdb <+13>:	add    %ecx,%eax			// mid1 += mid2;
   0x0000000000400fdd <+15>:	sar    %eax					// mid1 /=2;
   0x0000000000400fdf <+17>:	lea    (%rax,%rsi,1),%ecx	// mid2=y+mid1
   0x0000000000400fe2 <+20>:	cmp    %edi,%ecx
   0x0000000000400fe4 <+22>:	jle    0x400ff2 <func4+36>
   0x0000000000400fe6 <+24>:	lea    -0x1(%rcx),%edx
   0x0000000000400fe9 <+27>:	callq  0x400fce <func4>
   0x0000000000400fee <+32>:	add    %eax,%eax
   0x0000000000400ff0 <+34>:	jmp    0x401007 <func4+57>
   0x0000000000400ff2 <+36>:	mov    $0x0,%eax
   0x0000000000400ff7 <+41>:	cmp    %edi,%ecx
   0x0000000000400ff9 <+43>:	jge    0x401007 <func4+57>
   0x0000000000400ffb <+45>:	lea    0x1(%rcx),%esi
   0x0000000000400ffe <+48>:	callq  0x400fce <func4>
   0x0000000000401003 <+53>:	lea    0x1(%rax,%rax,1),%eax
   0x0000000000401007 <+57>:	add    $0x8,%rsp
   0x000000000040100b <+61>:	retq   

			edx	  esi   edi
int func4(int x,int y,int z){
  3     int mid1=x-y;
  4     int mid2=(mid1>>31);
  5 //  printf("x=%d y=%d z=%d mid2=%d\n",x,y,z,mid2);
  6     mid1+=mid2;
  7     mid1/=2;
  8     mid2=y+mid1;
  9     if(mid2<=z){
 10         y=0;
 11         if(mid2>=z){
 12             return 0;
 13         }
 14         return 2*func4(x,mid2+1,z)+1;
 15 
 16     }
 17     return 2*func4(mid2-1,y,z);
 18 }
 19 int main(){
 21     for(int i=0;i<15;i++){
 23         printf("%d\n",func4(15,0,i));
 24     }
	return 0;
	}

ANSWER for 4:
0 0, 1 0, 3 0, 7 0




(gdb) disass phase_5
Dump of assembler code for function phase_5:
   0x0000000000401062 <+0>:		push   %rbx
   0x0000000000401063 <+1>:		sub    $0x20,%rsp
   0x0000000000401067 <+5>:		mov    %rdi,%rbx
   0x000000000040106a <+8>:		0x
   0x000000000040107f <+29>:	cmp    $0x6,%eax
   0x0000000000401082 <+32>:	je     0x4010d2 <phase_5+112>
   0x0000000000401084 <+34>:	callq  0x40143a <explode_bomb>
   0x0000000000401089 <+39>:	jmp    0x4010d2 <phase_5+112>

   0x000000000040108b <+41>:	movzbl (%rbx,%rax,1),%ecx
   0x000000000040108f <+45>:	mov    %cl,(%rsp) // L means low byte ,H means high byte.
   0x0000000000401092 <+48>:	mov    (%rsp),%rdx
   0x0000000000401096 <+52>:	and    $0xf,%edx
   0x0000000000401099 <+55>:	movzbl 0x4024b0(%rdx),%edx
   0x00000000004010a0 <+62>:	mov    %dl,0x10(%rsp,%rax,1)
   0x00000000004010a4 <+66>:	add    $0x1,%rax		// loop condition
   0x00000000004010a8 <+70>:	cmp    $0x6,%rax
   0x00000000004010ac <+74>:	jne    0x40108b <phase_5+41>

   0x00000000004010ae <+76>:	movb   $0x0,0x16(%rsp)
   0x00000000004010b3 <+81>:	mov    $0x40245e,%esi		// flyers
   0x00000000004010b8 <+86>:	lea    0x10(%rsp),%rdi
   0x00000000004010bd <+91>:	callq  0x401338 <strings_not_equal>
   0x00000000004010c2 <+96>:	test   %eax,%eax
   0x00000000004010c4 <+98>:	je     0x4010d9 <phase_5+119>
   0x00000000004010c6 <+100>:	callq  0x40143a <explode_bomb>
   0x00000000004010cb <+105>:	nopl   0x0(%rax,%rax,1)
   0x00000000004010d0 <+110>:	jmp    0x4010d9 <phase_5+119>
   0x00000000004010d2 <+112>:	mov    $0x0,%eax
   0x00000000004010d7 <+117>:	jmp    0x40108b <phase_5+41>
   0x00000000004010d9 <+119>:	mov    0x18(%rsp),%rax
   0x00000000004010de <+124>:	xor    %fs:0x28,%rax
   0x00000000004010e7 <+133>:	je     0x4010ee <phase_5+140>
   0x00000000004010e9 <+135>:	callq  0x400b30 <__stack_chk_fail@plt>
   0x00000000004010ee <+140>:	add    $0x20,%rsp
   0x00000000004010f2 <+144>:	pop    %rbx
   0x00000000004010f3 <+145>:	retq
   
	取字符的后4位作为索引，从预设的一个长字符串取转换后的字符

	const char* pattern =  // 第17行，print (char*) 0x4024b0
	  "maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?";

	const char* input = "9?>567";

	char transformed[7];  // 第3, 4行分配的数组
	for (int rax = 0; rax != 6; ++rax) {
		int rcx = input[rax];
		int rdx = rcx & 0xf;
		transformed[rax] = (char)pattern[rdx];
	}
	transformed[6] = 0;  // 第22行
	const char* expected = "flyers"; // 第23行，print (char*) 0x40245e



	https://blog.csdn.net/astrotycoon/article/details/73249435



/ (fcn) sym.phase_6 272
|   sym.phase_6 ();
|           ; var int local_18h @ rsp+0x18
|           ; var int local_20h @ rsp+0x20
|           ; var int local_28h @ rsp+0x28
|           ; var int local_50h @ rsp+0x50
|           ; CALL XREF from 0x00400ec6 (sym.main)
|           0x004010f4      4156           push r14
|           0x004010f6      4155           push r13
|           0x004010f8      4154           push r12
|           0x004010fa      55             push rbp
|           0x004010fb      53             push rbx
|           0x004010fc      4883ec50       sub rsp, 0x50               ; 'P'
|           0x00401100      4989e5         mov r13, rsp
|           0x00401103      4889e6         mov rsi, rsp
|           0x00401106      e851030000     call sym.read_six_numbers  ; ssize_t read(int fildes, void *buf, size_t nbyte);
|           0x0040110b      4989e6         mov r14, rsp
|           0x0040110e      41bc00000000   mov r12d, 0
|           ; JMP XREF from 0x00401151 (sym.phase_6)
|       .-> 0x00401114      4c89ed         mov rbp, r13
|       |   0x00401117      418b4500       mov eax, dword [r13]
|       |   0x0040111b      83e801         sub eax, 1
|       |   0x0040111e      83f805         cmp eax, 5
|      ,==< 0x00401121      7605           jbe 0x401128
|      ||   0x00401123      e812030000     call sym.explode_bomb      ; long double expl(long double x);
|      ||   ; JMP XREF from 0x00401121 (sym.phase_6)
|      `--> 0x00401128      4183c401       add r12d, 1
|       |   0x0040112c      4183fc06       cmp r12d, 6
|      ,==< 0x00401130      7421           je 0x401153
|      ||   0x00401132      4489e3         mov ebx, r12d
|      ||   ; JMP XREF from 0x0040114b (sym.phase_6)
|     .---> 0x00401135      4863c3         movsxd rax, ebx
|     |||   0x00401138      8b0484         mov eax, dword [rsp + rax*4]
|     |||   0x0040113b      394500         cmp dword [rbp], eax        ; [0x13:4]=256
|    ,====< 0x0040113e      7505           jne 0x401145
|    ||||   0x00401140      e8f5020000     call sym.explode_bomb      ; long double expl(long double x);
|    ||||   ; JMP XREF from 0x0040113e (sym.phase_6)
|    `----> 0x00401145      83c301         add ebx, 1
|     |||   0x00401148      83fb05         cmp ebx, 5
|     `===< 0x0040114b      7ee8           jle 0x401135
|      ||   0x0040114d      4983c504       add r13, 4
|      |`=< 0x00401151      ebc1           jmp 0x401114
|      |    ; JMP XREF from 0x00401130 (sym.phase_6)
|      `--> 0x00401153      488d742418     lea rsi, qword [rsp + local_18h] ; 0x18
|           0x00401158      4c89f0         mov rax, r14
|           0x0040115b      b907000000     mov ecx, 7
|           ; JMP XREF from 0x0040116d (sym.phase_6)
|       .-> 0x00401160      89ca           mov edx, ecx
|       |   0x00401162      2b10           sub edx, dword [rax]
|       |   0x00401164      8910           mov dword [rax], edx
|       |   0x00401166      4883c004       add rax, 4
|       |   0x0040116a      4839f0         cmp rax, rsi
|       `=< 0x0040116d      75f1           jne 0x401160
|           0x0040116f      be00000000     mov esi, 0
|       ,=< 0x00401174      eb21           jmp 0x401197
|       |   ; JMP XREF from 0x004011a9 (sym.phase_6)
|       |   ; JMP XREF from 0x0040117f (sym.phase_6)
|     ..--> 0x00401176      488b5208       mov rdx, qword [rdx + 8]    ; [0x8:8]=0
|     |||   0x0040117a      83c001         add eax, 1
|     |||   0x0040117d      39c8           cmp eax, ecx
|     `===< 0x0040117f      75f5           jne 0x401176
|     ,===< 0x00401181      eb05           jmp 0x401188
|     |||   ; JMP XREF from 0x0040119d (sym.phase_6)
|    .----> 0x00401183      bad0326000     mov edx, obj.node1          ; "L." @ 0x6032d0
|    ||||   ; JMP XREF from 0x00401181 (sym.phase_6)
|    |`---> 0x00401188      4889547420     mov qword [rsp + rsi*2 + 0x20], rdx
|    | ||   0x0040118d      4883c604       add rsi, 4
|    | ||   0x00401191      4883fe18       cmp rsi, 0x18
|    |,===< 0x00401195      7414           je 0x4011ab
|    ||||   ; JMP XREF from 0x00401174 (sym.phase_6)
|    |||`-> 0x00401197      8b0c34         mov ecx, dword [rsp + rsi]
|    |||    0x0040119a      83f901         cmp ecx, 1
|    `====< 0x0040119d      7ee4           jle 0x401183
|     ||    0x0040119f      b801000000     mov eax, 1
|     ||    0x004011a4      bad0326000     mov edx, obj.node1          ; "L." @ 0x6032d0
|     |`==< 0x004011a9      ebcb           jmp 0x401176
|     |     ; JMP XREF from 0x00401195 (sym.phase_6)
|     `---> 0x004011ab      488b5c2420     mov rbx, qword [rsp + local_20h] ; [0x20:8]=64 ; "@" 0x00000020
|           0x004011b0      488d442428     lea rax, qword [rsp + local_28h] ; 0x28 ; '('
|           0x004011b5      488d742450     lea rsi, qword [rsp + local_50h] ; 0x50 ; "@" ; 'P'
|           0x004011ba      4889d9         mov rcx, rbx
|           ; JMP XREF from 0x004011d0 (sym.phase_6)
|       .-> 0x004011bd      488b10         mov rdx, qword [rax]
|       |   0x004011c0      48895108       mov qword [rcx + 8], rdx
|       |   0x004011c4      4883c008       add rax, 8
|       |   0x004011c8      4839f0         cmp rax, rsi
|      ,==< 0x004011cb      7405           je 0x4011d2
|      ||   0x004011cd      4889d1         mov rcx, rdx
|      |`=< 0x004011d0      ebeb           jmp 0x4011bd
|      |    ; JMP XREF from 0x004011cb (sym.phase_6)
|      `--> 0x004011d2      48c742080000.  mov qword [rdx + 8], 0
|           0x004011da      bd05000000     mov ebp, 5
|           ; JMP XREF from 0x004011f5 (sym.phase_6)
|       .-> 0x004011df      488b4308       mov rax, qword [rbx + 8]    ; [0x8:8]=0
|       |   0x004011e3      8b00           mov eax, dword [rax]
|       |   0x004011e5      3903           cmp dword [rbx], eax        ; [0x13:4]=256
|      ,==< 0x004011e7      7d05           jge 0x4011ee
|      ||   0x004011e9      e84c020000     call sym.explode_bomb      ; long double expl(long double x);
|      ||   ; JMP XREF from 0x004011e7 (sym.phase_6)
|      `--> 0x004011ee      488b5b08       mov rbx, qword [rbx + 8]    ; [0x8:8]=0
|       |   0x004011f2      83ed01         sub ebp, 1
|       `=< 0x004011f5      75e8           jne 0x4011df
|           0x004011f7      4883c450       add rsp, 0x50               ; 'P'
|           0x004011fb      5b             pop rbx
|           0x004011fc      5d             pop rbp
|           0x004011fd      415c           pop r12
|           0x004011ff      415d           pop r13
|           0x00401201      415e           pop r14
\           0x00401203      c3             ret
